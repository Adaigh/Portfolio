{
  "version": 3,
  "sources": ["../../heap-js/dist/heap-js.es5.js"],
  "sourcesContent": ["var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator$1 = (undefined && undefined.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (g && (g = 0, op[0] && (_ = 0)), _) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nvar __read$1 = (undefined && undefined.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spreadArray$1 = (undefined && undefined.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\nvar __values = (undefined && undefined.__values) || function(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\n/**\n * Heap\n * @type {Class}\n */\nvar HeapAsync = /** @class */ (function () {\n    /**\n     * Heap instance constructor.\n     * @param  {Function} compare Optional comparison function, defaults to Heap.minComparator<number>\n     */\n    function HeapAsync(compare) {\n        if (compare === void 0) { compare = HeapAsync.minComparator; }\n        var _this = this;\n        this.compare = compare;\n        this.heapArray = [];\n        this._limit = 0;\n        /**\n         * Alias of add\n         */\n        this.offer = this.add;\n        /**\n         * Alias of peek\n         */\n        this.element = this.peek;\n        /**\n         * Alias of pop\n         */\n        this.poll = this.pop;\n        /**\n         * Returns the inverse to the comparison function.\n         * @return {Number}\n         */\n        this._invertedCompare = function (a, b) {\n            return _this.compare(a, b).then(function (res) { return -1 * res; });\n        };\n    }\n    /*\n              Static methods\n     */\n    /**\n     * Gets children indices for given index.\n     * @param  {Number} idx     Parent index\n     * @return {Array(Number)}  Array of children indices\n     */\n    HeapAsync.getChildrenIndexOf = function (idx) {\n        return [idx * 2 + 1, idx * 2 + 2];\n    };\n    /**\n     * Gets parent index for given index.\n     * @param  {Number} idx  Children index\n     * @return {Number | undefined}      Parent index, -1 if idx is 0\n     */\n    HeapAsync.getParentIndexOf = function (idx) {\n        if (idx <= 0) {\n            return -1;\n        }\n        var whichChildren = idx % 2 ? 1 : 2;\n        return Math.floor((idx - whichChildren) / 2);\n    };\n    /**\n     * Gets sibling index for given index.\n     * @param  {Number} idx  Children index\n     * @return {Number | undefined}      Sibling index, -1 if idx is 0\n     */\n    HeapAsync.getSiblingIndexOf = function (idx) {\n        if (idx <= 0) {\n            return -1;\n        }\n        var whichChildren = idx % 2 ? 1 : -1;\n        return idx + whichChildren;\n    };\n    /**\n     * Min heap comparison function, default.\n     * @param  {any} a     First element\n     * @param  {any} b     Second element\n     * @return {Number}    0 if they're equal, positive if `a` goes up, negative if `b` goes up\n     */\n    HeapAsync.minComparator = function (a, b) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator$1(this, function (_a) {\n                if (a > b) {\n                    return [2 /*return*/, 1];\n                }\n                else if (a < b) {\n                    return [2 /*return*/, -1];\n                }\n                else {\n                    return [2 /*return*/, 0];\n                }\n            });\n        });\n    };\n    /**\n     * Max heap comparison function.\n     * @param  {any} a     First element\n     * @param  {any} b     Second element\n     * @return {Number}    0 if they're equal, positive if `a` goes up, negative if `b` goes up\n     */\n    HeapAsync.maxComparator = function (a, b) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator$1(this, function (_a) {\n                if (b > a) {\n                    return [2 /*return*/, 1];\n                }\n                else if (b < a) {\n                    return [2 /*return*/, -1];\n                }\n                else {\n                    return [2 /*return*/, 0];\n                }\n            });\n        });\n    };\n    /**\n     * Min number heap comparison function, default.\n     * @param  {Number} a     First element\n     * @param  {Number} b     Second element\n     * @return {Number}    0 if they're equal, positive if `a` goes up, negative if `b` goes up\n     */\n    HeapAsync.minComparatorNumber = function (a, b) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator$1(this, function (_a) {\n                return [2 /*return*/, a - b];\n            });\n        });\n    };\n    /**\n     * Max number heap comparison function.\n     * @param  {Number} a     First element\n     * @param  {Number} b     Second element\n     * @return {Number}    0 if they're equal, positive if `a` goes up, negative if `b` goes up\n     */\n    HeapAsync.maxComparatorNumber = function (a, b) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator$1(this, function (_a) {\n                return [2 /*return*/, b - a];\n            });\n        });\n    };\n    /**\n     * Default equality function.\n     * @param  {any} a    First element\n     * @param  {any} b    Second element\n     * @return {Boolean}  True if equal, false otherwise\n     */\n    HeapAsync.defaultIsEqual = function (a, b) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator$1(this, function (_a) {\n                return [2 /*return*/, a === b];\n            });\n        });\n    };\n    /**\n     * Prints a heap.\n     * @param  {HeapAsync} heap Heap to be printed\n     * @returns {String}\n     */\n    HeapAsync.print = function (heap) {\n        function deep(i) {\n            var pi = HeapAsync.getParentIndexOf(i);\n            return Math.floor(Math.log2(pi + 1));\n        }\n        function repeat(str, times) {\n            var out = '';\n            for (; times > 0; --times) {\n                out += str;\n            }\n            return out;\n        }\n        var node = 0;\n        var lines = [];\n        var maxLines = deep(heap.length - 1) + 2;\n        var maxLength = 0;\n        while (node < heap.length) {\n            var i = deep(node) + 1;\n            if (node === 0) {\n                i = 0;\n            }\n            // Text representation\n            var nodeText = String(heap.get(node));\n            if (nodeText.length > maxLength) {\n                maxLength = nodeText.length;\n            }\n            // Add to line\n            lines[i] = lines[i] || [];\n            lines[i].push(nodeText);\n            node += 1;\n        }\n        return lines\n            .map(function (line, i) {\n            var times = Math.pow(2, maxLines - i) - 1;\n            return (repeat(' ', Math.floor(times / 2) * maxLength) +\n                line\n                    .map(function (el) {\n                    // centered\n                    var half = (maxLength - el.length) / 2;\n                    return repeat(' ', Math.ceil(half)) + el + repeat(' ', Math.floor(half));\n                })\n                    .join(repeat(' ', times * maxLength)));\n        })\n            .join('\\n');\n    };\n    /*\n              Python style\n     */\n    /**\n     * Converts an array into an array-heap, in place\n     * @param  {Array}    arr      Array to be modified\n     * @param  {Function} compare  Optional compare function\n     * @return {HeapAsync}              For convenience, it returns a Heap instance\n     */\n    HeapAsync.heapify = function (arr, compare) {\n        return __awaiter(this, void 0, void 0, function () {\n            var heap;\n            return __generator$1(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        heap = new HeapAsync(compare);\n                        heap.heapArray = arr;\n                        return [4 /*yield*/, heap.init()];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/, heap];\n                }\n            });\n        });\n    };\n    /**\n     * Extract the peek of an array-heap\n     * @param  {Array}    heapArr  Array to be modified, should be a heap\n     * @param  {Function} compare  Optional compare function\n     * @return {any}               Returns the extracted peek\n     */\n    HeapAsync.heappop = function (heapArr, compare) {\n        var heap = new HeapAsync(compare);\n        heap.heapArray = heapArr;\n        return heap.pop();\n    };\n    /**\n     * Pushes a item into an array-heap\n     * @param  {Array}    heapArr  Array to be modified, should be a heap\n     * @param  {any}      item     Item to push\n     * @param  {Function} compare  Optional compare function\n     */\n    HeapAsync.heappush = function (heapArr, item, compare) {\n        return __awaiter(this, void 0, void 0, function () {\n            var heap;\n            return __generator$1(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        heap = new HeapAsync(compare);\n                        heap.heapArray = heapArr;\n                        return [4 /*yield*/, heap.push(item)];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Push followed by pop, faster\n     * @param  {Array}    heapArr  Array to be modified, should be a heap\n     * @param  {any}      item     Item to push\n     * @param  {Function} compare  Optional compare function\n     * @return {any}               Returns the extracted peek\n     */\n    HeapAsync.heappushpop = function (heapArr, item, compare) {\n        var heap = new HeapAsync(compare);\n        heap.heapArray = heapArr;\n        return heap.pushpop(item);\n    };\n    /**\n     * Replace peek with item\n     * @param  {Array}    heapArr  Array to be modified, should be a heap\n     * @param  {any}      item     Item as replacement\n     * @param  {Function} compare  Optional compare function\n     * @return {any}               Returns the extracted peek\n     */\n    HeapAsync.heapreplace = function (heapArr, item, compare) {\n        var heap = new HeapAsync(compare);\n        heap.heapArray = heapArr;\n        return heap.replace(item);\n    };\n    /**\n     * Return the `n` most valuable elements of a heap-like Array\n     * @param  {Array}    heapArr  Array, should be an array-heap\n     * @param  {number}   n        Max number of elements\n     * @param  {Function} compare  Optional compare function\n     * @return {any}               Elements\n     */\n    HeapAsync.heaptop = function (heapArr, n, compare) {\n        if (n === void 0) { n = 1; }\n        var heap = new HeapAsync(compare);\n        heap.heapArray = heapArr;\n        return heap.top(n);\n    };\n    /**\n     * Return the `n` least valuable elements of a heap-like Array\n     * @param  {Array}    heapArr  Array, should be an array-heap\n     * @param  {number}   n        Max number of elements\n     * @param  {Function} compare  Optional compare function\n     * @return {any}               Elements\n     */\n    HeapAsync.heapbottom = function (heapArr, n, compare) {\n        if (n === void 0) { n = 1; }\n        var heap = new HeapAsync(compare);\n        heap.heapArray = heapArr;\n        return heap.bottom(n);\n    };\n    /**\n     * Return the `n` most valuable elements of an iterable\n     * @param  {number}   n        Max number of elements\n     * @param  {Iterable} Iterable Iterable list of elements\n     * @param  {Function} compare  Optional compare function\n     * @return {any}               Elements\n     */\n    HeapAsync.nlargest = function (n, iterable, compare) {\n        return __awaiter(this, void 0, void 0, function () {\n            var heap;\n            return __generator$1(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        heap = new HeapAsync(compare);\n                        heap.heapArray = __spreadArray$1([], __read$1(iterable), false);\n                        return [4 /*yield*/, heap.init()];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/, heap.top(n)];\n                }\n            });\n        });\n    };\n    /**\n     * Return the `n` least valuable elements of an iterable\n     * @param  {number}   n        Max number of elements\n     * @param  {Iterable} Iterable Iterable list of elements\n     * @param  {Function} compare  Optional compare function\n     * @return {any}               Elements\n     */\n    HeapAsync.nsmallest = function (n, iterable, compare) {\n        return __awaiter(this, void 0, void 0, function () {\n            var heap;\n            return __generator$1(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        heap = new HeapAsync(compare);\n                        heap.heapArray = __spreadArray$1([], __read$1(iterable), false);\n                        return [4 /*yield*/, heap.init()];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/, heap.bottom(n)];\n                }\n            });\n        });\n    };\n    /*\n              Instance methods\n     */\n    /**\n     * Adds an element to the heap. Aliases: `offer`.\n     * Same as: push(element)\n     * @param {any} element Element to be added\n     * @return {Boolean} true\n     */\n    HeapAsync.prototype.add = function (element) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator$1(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this._sortNodeUp(this.heapArray.push(element) - 1)];\n                    case 1:\n                        _a.sent();\n                        this._applyLimit();\n                        return [2 /*return*/, true];\n                }\n            });\n        });\n    };\n    /**\n     * Adds an array of elements to the heap.\n     * Similar as: push(element, element, ...).\n     * @param {Array} elements Elements to be added\n     * @return {Boolean} true\n     */\n    HeapAsync.prototype.addAll = function (elements) {\n        return __awaiter(this, void 0, void 0, function () {\n            var i, l;\n            var _a;\n            return __generator$1(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        i = this.length;\n                        (_a = this.heapArray).push.apply(_a, __spreadArray$1([], __read$1(elements), false));\n                        l = this.length;\n                        _b.label = 1;\n                    case 1:\n                        if (!(i < l)) return [3 /*break*/, 4];\n                        return [4 /*yield*/, this._sortNodeUp(i)];\n                    case 2:\n                        _b.sent();\n                        _b.label = 3;\n                    case 3:\n                        ++i;\n                        return [3 /*break*/, 1];\n                    case 4:\n                        this._applyLimit();\n                        return [2 /*return*/, true];\n                }\n            });\n        });\n    };\n    /**\n     * Return the bottom (lowest value) N elements of the heap.\n     *\n     * @param  {Number} n  Number of elements.\n     * @return {Array}     Array of length <= N.\n     */\n    HeapAsync.prototype.bottom = function (n) {\n        if (n === void 0) { n = 1; }\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator$1(this, function (_a) {\n                if (this.heapArray.length === 0 || n <= 0) {\n                    // Nothing to do\n                    return [2 /*return*/, []];\n                }\n                else if (this.heapArray.length === 1) {\n                    // Just the peek\n                    return [2 /*return*/, [this.heapArray[0]]];\n                }\n                else if (n >= this.heapArray.length) {\n                    // The whole heap\n                    return [2 /*return*/, __spreadArray$1([], __read$1(this.heapArray), false)];\n                }\n                else {\n                    // Some elements\n                    return [2 /*return*/, this._bottomN_push(~~n)];\n                }\n            });\n        });\n    };\n    /**\n     * Check if the heap is sorted, useful for testing purposes.\n     * @return {Undefined | Element}  Returns an element if something wrong is found, otherwise it's undefined\n     */\n    HeapAsync.prototype.check = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var j, el, children, children_1, children_1_1, ch, e_1_1;\n            var e_1, _a;\n            return __generator$1(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        j = 0;\n                        _b.label = 1;\n                    case 1:\n                        if (!(j < this.heapArray.length)) return [3 /*break*/, 10];\n                        el = this.heapArray[j];\n                        children = this.getChildrenOf(j);\n                        _b.label = 2;\n                    case 2:\n                        _b.trys.push([2, 7, 8, 9]);\n                        children_1 = (e_1 = void 0, __values(children)), children_1_1 = children_1.next();\n                        _b.label = 3;\n                    case 3:\n                        if (!!children_1_1.done) return [3 /*break*/, 6];\n                        ch = children_1_1.value;\n                        return [4 /*yield*/, this.compare(el, ch)];\n                    case 4:\n                        if ((_b.sent()) > 0) {\n                            return [2 /*return*/, el];\n                        }\n                        _b.label = 5;\n                    case 5:\n                        children_1_1 = children_1.next();\n                        return [3 /*break*/, 3];\n                    case 6: return [3 /*break*/, 9];\n                    case 7:\n                        e_1_1 = _b.sent();\n                        e_1 = { error: e_1_1 };\n                        return [3 /*break*/, 9];\n                    case 8:\n                        try {\n                            if (children_1_1 && !children_1_1.done && (_a = children_1.return)) _a.call(children_1);\n                        }\n                        finally { if (e_1) throw e_1.error; }\n                        return [7 /*endfinally*/];\n                    case 9:\n                        ++j;\n                        return [3 /*break*/, 1];\n                    case 10: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Remove all of the elements from this heap.\n     */\n    HeapAsync.prototype.clear = function () {\n        this.heapArray = [];\n    };\n    /**\n     * Clone this heap\n     * @return {HeapAsync}\n     */\n    HeapAsync.prototype.clone = function () {\n        var cloned = new HeapAsync(this.comparator());\n        cloned.heapArray = this.toArray();\n        cloned._limit = this._limit;\n        return cloned;\n    };\n    /**\n     * Returns the comparison function.\n     * @return {Function}\n     */\n    HeapAsync.prototype.comparator = function () {\n        return this.compare;\n    };\n    /**\n     * Returns true if this queue contains the specified element.\n     * @param  {any}      o   Element to be found\n     * @param  {Function} fn  Optional comparison function, receives (element, needle)\n     * @return {Boolean}\n     */\n    HeapAsync.prototype.contains = function (o, fn) {\n        if (fn === void 0) { fn = HeapAsync.defaultIsEqual; }\n        return __awaiter(this, void 0, void 0, function () {\n            var _a, _b, el, e_2_1;\n            var e_2, _c;\n            return __generator$1(this, function (_d) {\n                switch (_d.label) {\n                    case 0:\n                        _d.trys.push([0, 5, 6, 7]);\n                        _a = __values(this.heapArray), _b = _a.next();\n                        _d.label = 1;\n                    case 1:\n                        if (!!_b.done) return [3 /*break*/, 4];\n                        el = _b.value;\n                        return [4 /*yield*/, fn(el, o)];\n                    case 2:\n                        if (_d.sent()) {\n                            return [2 /*return*/, true];\n                        }\n                        _d.label = 3;\n                    case 3:\n                        _b = _a.next();\n                        return [3 /*break*/, 1];\n                    case 4: return [3 /*break*/, 7];\n                    case 5:\n                        e_2_1 = _d.sent();\n                        e_2 = { error: e_2_1 };\n                        return [3 /*break*/, 7];\n                    case 6:\n                        try {\n                            if (_b && !_b.done && (_c = _a.return)) _c.call(_a);\n                        }\n                        finally { if (e_2) throw e_2.error; }\n                        return [7 /*endfinally*/];\n                    case 7: return [2 /*return*/, false];\n                }\n            });\n        });\n    };\n    /**\n     * Initialise a heap, sorting nodes\n     * @param  {Array} array Optional initial state array\n     */\n    HeapAsync.prototype.init = function (array) {\n        return __awaiter(this, void 0, void 0, function () {\n            var i;\n            return __generator$1(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (array) {\n                            this.heapArray = __spreadArray$1([], __read$1(array), false);\n                        }\n                        i = Math.floor(this.heapArray.length);\n                        _a.label = 1;\n                    case 1:\n                        if (!(i >= 0)) return [3 /*break*/, 4];\n                        return [4 /*yield*/, this._sortNodeDown(i)];\n                    case 2:\n                        _a.sent();\n                        _a.label = 3;\n                    case 3:\n                        --i;\n                        return [3 /*break*/, 1];\n                    case 4:\n                        this._applyLimit();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Test if the heap has no elements.\n     * @return {Boolean} True if no elements on the heap\n     */\n    HeapAsync.prototype.isEmpty = function () {\n        return this.length === 0;\n    };\n    /**\n     * Get the leafs of the tree (no children nodes)\n     */\n    HeapAsync.prototype.leafs = function () {\n        if (this.heapArray.length === 0) {\n            return [];\n        }\n        var pi = HeapAsync.getParentIndexOf(this.heapArray.length - 1);\n        return this.heapArray.slice(pi + 1);\n    };\n    Object.defineProperty(HeapAsync.prototype, \"length\", {\n        /**\n         * Length of the heap.\n         * @return {Number}\n         */\n        get: function () {\n            return this.heapArray.length;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(HeapAsync.prototype, \"limit\", {\n        /**\n         * Get length limit of the heap.\n         * @return {Number}\n         */\n        get: function () {\n            return this._limit;\n        },\n        /**\n         * Set length limit of the heap.\n         * @return {Number}\n         */\n        set: function (_l) {\n            this._limit = ~~_l;\n            this._applyLimit();\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Top node. Aliases: `element`.\n     * Same as: `top(1)[0]`\n     * @return {any} Top node\n     */\n    HeapAsync.prototype.peek = function () {\n        return this.heapArray[0];\n    };\n    /**\n     * Extract the top node (root). Aliases: `poll`.\n     * @return {any} Extracted top node, undefined if empty\n     */\n    HeapAsync.prototype.pop = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var last;\n            return __generator$1(this, function (_a) {\n                last = this.heapArray.pop();\n                if (this.length > 0 && last !== undefined) {\n                    return [2 /*return*/, this.replace(last)];\n                }\n                return [2 /*return*/, last];\n            });\n        });\n    };\n    /**\n     * Pushes element(s) to the heap.\n     * @param  {...any} elements Elements to insert\n     * @return {Boolean} True if elements are present\n     */\n    HeapAsync.prototype.push = function () {\n        var elements = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            elements[_i] = arguments[_i];\n        }\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator$1(this, function (_a) {\n                if (elements.length < 1) {\n                    return [2 /*return*/, false];\n                }\n                else if (elements.length === 1) {\n                    return [2 /*return*/, this.add(elements[0])];\n                }\n                else {\n                    return [2 /*return*/, this.addAll(elements)];\n                }\n            });\n        });\n    };\n    /**\n     * Same as push & pop in sequence, but faster\n     * @param  {any} element Element to insert\n     * @return {any}  Extracted top node\n     */\n    HeapAsync.prototype.pushpop = function (element) {\n        return __awaiter(this, void 0, void 0, function () {\n            var _a;\n            return __generator$1(this, function (_b) {\n                switch (_b.label) {\n                    case 0: return [4 /*yield*/, this.compare(this.heapArray[0], element)];\n                    case 1:\n                        if (!((_b.sent()) < 0)) return [3 /*break*/, 3];\n                        _a = __read$1([this.heapArray[0], element], 2), element = _a[0], this.heapArray[0] = _a[1];\n                        return [4 /*yield*/, this._sortNodeDown(0)];\n                    case 2:\n                        _b.sent();\n                        _b.label = 3;\n                    case 3: return [2 /*return*/, element];\n                }\n            });\n        });\n    };\n    /**\n     * Remove an element from the heap.\n     * @param  {any}   o      Element to be found\n     * @param  {Function} fn  Optional function to compare\n     * @return {Boolean}      True if the heap was modified\n     */\n    HeapAsync.prototype.remove = function (o, fn) {\n        if (fn === void 0) { fn = HeapAsync.defaultIsEqual; }\n        return __awaiter(this, void 0, void 0, function () {\n            var idx, i;\n            return __generator$1(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!(this.length > 0)) return [3 /*break*/, 13];\n                        if (!(o === undefined)) return [3 /*break*/, 2];\n                        return [4 /*yield*/, this.pop()];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/, true];\n                    case 2:\n                        idx = -1;\n                        i = 0;\n                        _a.label = 3;\n                    case 3:\n                        if (!(i < this.heapArray.length)) return [3 /*break*/, 6];\n                        return [4 /*yield*/, fn(this.heapArray[i], o)];\n                    case 4:\n                        if (_a.sent()) {\n                            idx = i;\n                            return [3 /*break*/, 6];\n                        }\n                        _a.label = 5;\n                    case 5:\n                        ++i;\n                        return [3 /*break*/, 3];\n                    case 6:\n                        if (!(idx >= 0)) return [3 /*break*/, 13];\n                        if (!(idx === 0)) return [3 /*break*/, 8];\n                        return [4 /*yield*/, this.pop()];\n                    case 7:\n                        _a.sent();\n                        return [3 /*break*/, 12];\n                    case 8:\n                        if (!(idx === this.length - 1)) return [3 /*break*/, 9];\n                        this.heapArray.pop();\n                        return [3 /*break*/, 12];\n                    case 9:\n                        this.heapArray.splice(idx, 1, this.heapArray.pop());\n                        return [4 /*yield*/, this._sortNodeUp(idx)];\n                    case 10:\n                        _a.sent();\n                        return [4 /*yield*/, this._sortNodeDown(idx)];\n                    case 11:\n                        _a.sent();\n                        _a.label = 12;\n                    case 12: return [2 /*return*/, true];\n                    case 13: return [2 /*return*/, false];\n                }\n            });\n        });\n    };\n    /**\n     * Pop the current peek value, and add the new item.\n     * @param  {any} element  Element to replace peek\n     * @return {any}         Old peek\n     */\n    HeapAsync.prototype.replace = function (element) {\n        return __awaiter(this, void 0, void 0, function () {\n            var peek;\n            return __generator$1(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        peek = this.heapArray[0];\n                        this.heapArray[0] = element;\n                        return [4 /*yield*/, this._sortNodeDown(0)];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/, peek];\n                }\n            });\n        });\n    };\n    /**\n     * Size of the heap\n     * @return {Number}\n     */\n    HeapAsync.prototype.size = function () {\n        return this.length;\n    };\n    /**\n     * Return the top (highest value) N elements of the heap.\n     *\n     * @param  {Number} n  Number of elements.\n     * @return {Array}    Array of length <= N.\n     */\n    HeapAsync.prototype.top = function (n) {\n        if (n === void 0) { n = 1; }\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator$1(this, function (_a) {\n                if (this.heapArray.length === 0 || n <= 0) {\n                    // Nothing to do\n                    return [2 /*return*/, []];\n                }\n                else if (this.heapArray.length === 1 || n === 1) {\n                    // Just the peek\n                    return [2 /*return*/, [this.heapArray[0]]];\n                }\n                else if (n >= this.heapArray.length) {\n                    // The whole peek\n                    return [2 /*return*/, __spreadArray$1([], __read$1(this.heapArray), false)];\n                }\n                else {\n                    // Some elements\n                    return [2 /*return*/, this._topN_push(~~n)];\n                }\n            });\n        });\n    };\n    /**\n     * Clone the heap's internal array\n     * @return {Array}\n     */\n    HeapAsync.prototype.toArray = function () {\n        return __spreadArray$1([], __read$1(this.heapArray), false);\n    };\n    /**\n     * String output, call to Array.prototype.toString()\n     * @return {String}\n     */\n    HeapAsync.prototype.toString = function () {\n        return this.heapArray.toString();\n    };\n    /**\n     * Get the element at the given index.\n     * @param  {Number} i Index to get\n     * @return {any}       Element at that index\n     */\n    HeapAsync.prototype.get = function (i) {\n        return this.heapArray[i];\n    };\n    /**\n     * Get the elements of these node's children\n     * @param  {Number} idx Node index\n     * @return {Array(any)}  Children elements\n     */\n    HeapAsync.prototype.getChildrenOf = function (idx) {\n        var _this = this;\n        return HeapAsync.getChildrenIndexOf(idx)\n            .map(function (i) { return _this.heapArray[i]; })\n            .filter(function (e) { return e !== undefined; });\n    };\n    /**\n     * Get the element of this node's parent\n     * @param  {Number} idx Node index\n     * @return {any}     Parent element\n     */\n    HeapAsync.prototype.getParentOf = function (idx) {\n        var pi = HeapAsync.getParentIndexOf(idx);\n        return this.heapArray[pi];\n    };\n    /**\n     * Iterator interface\n     */\n    HeapAsync.prototype[Symbol.iterator] = function () {\n        return __generator$1(this, function (_a) {\n            switch (_a.label) {\n                case 0:\n                    if (!this.length) return [3 /*break*/, 2];\n                    return [4 /*yield*/, this.pop()];\n                case 1:\n                    _a.sent();\n                    return [3 /*break*/, 0];\n                case 2: return [2 /*return*/];\n            }\n        });\n    };\n    /**\n     * Returns an iterator. To comply with Java interface.\n     */\n    HeapAsync.prototype.iterator = function () {\n        return this;\n    };\n    /**\n     * Limit heap size if needed\n     */\n    HeapAsync.prototype._applyLimit = function () {\n        if (this._limit && this._limit < this.heapArray.length) {\n            var rm = this.heapArray.length - this._limit;\n            // It's much faster than splice\n            while (rm) {\n                this.heapArray.pop();\n                --rm;\n            }\n        }\n    };\n    /**\n     * Return the bottom (lowest value) N elements of the heap, without corner cases, unsorted\n     *\n     * @param  {Number} n  Number of elements.\n     * @return {Array}     Array of length <= N.\n     */\n    HeapAsync.prototype._bottomN_push = function (n) {\n        return __awaiter(this, void 0, void 0, function () {\n            var bottomHeap, startAt, parentStartAt, indices, i, arr, i;\n            return __generator$1(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        bottomHeap = new HeapAsync(this.compare);\n                        bottomHeap.limit = n;\n                        bottomHeap.heapArray = this.heapArray.slice(-n);\n                        return [4 /*yield*/, bottomHeap.init()];\n                    case 1:\n                        _a.sent();\n                        startAt = this.heapArray.length - 1 - n;\n                        parentStartAt = HeapAsync.getParentIndexOf(startAt);\n                        indices = [];\n                        for (i = startAt; i > parentStartAt; --i) {\n                            indices.push(i);\n                        }\n                        arr = this.heapArray;\n                        _a.label = 2;\n                    case 2:\n                        if (!indices.length) return [3 /*break*/, 6];\n                        i = indices.shift();\n                        return [4 /*yield*/, this.compare(arr[i], bottomHeap.peek())];\n                    case 3:\n                        if (!((_a.sent()) > 0)) return [3 /*break*/, 5];\n                        return [4 /*yield*/, bottomHeap.replace(arr[i])];\n                    case 4:\n                        _a.sent();\n                        if (i % 2) {\n                            indices.push(HeapAsync.getParentIndexOf(i));\n                        }\n                        _a.label = 5;\n                    case 5: return [3 /*break*/, 2];\n                    case 6: return [2 /*return*/, bottomHeap.toArray()];\n                }\n            });\n        });\n    };\n    /**\n     * Move a node to a new index, switching places\n     * @param  {Number} j First node index\n     * @param  {Number} k Another node index\n     */\n    HeapAsync.prototype._moveNode = function (j, k) {\n        var _a;\n        _a = __read$1([this.heapArray[k], this.heapArray[j]], 2), this.heapArray[j] = _a[0], this.heapArray[k] = _a[1];\n    };\n    /**\n     * Move a node down the tree (to the leaves) to find a place where the heap is sorted.\n     * @param  {Number} i Index of the node\n     */\n    HeapAsync.prototype._sortNodeDown = function (i) {\n        return __awaiter(this, void 0, void 0, function () {\n            var moveIt, self, getPotentialParent, childrenIdx, bestChildIndex, j, bestChild, _a;\n            var _this = this;\n            return __generator$1(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        moveIt = i < this.heapArray.length - 1;\n                        self = this.heapArray[i];\n                        getPotentialParent = function (best, j) { return __awaiter(_this, void 0, void 0, function () {\n                            var _a;\n                            return __generator$1(this, function (_b) {\n                                switch (_b.label) {\n                                    case 0:\n                                        _a = this.heapArray.length > j;\n                                        if (!_a) return [3 /*break*/, 2];\n                                        return [4 /*yield*/, this.compare(this.heapArray[j], this.heapArray[best])];\n                                    case 1:\n                                        _a = (_b.sent()) < 0;\n                                        _b.label = 2;\n                                    case 2:\n                                        if (_a) {\n                                            best = j;\n                                        }\n                                        return [2 /*return*/, best];\n                                }\n                            });\n                        }); };\n                        _b.label = 1;\n                    case 1:\n                        if (!moveIt) return [3 /*break*/, 8];\n                        childrenIdx = HeapAsync.getChildrenIndexOf(i);\n                        bestChildIndex = childrenIdx[0];\n                        j = 1;\n                        _b.label = 2;\n                    case 2:\n                        if (!(j < childrenIdx.length)) return [3 /*break*/, 5];\n                        return [4 /*yield*/, getPotentialParent(bestChildIndex, childrenIdx[j])];\n                    case 3:\n                        bestChildIndex = _b.sent();\n                        _b.label = 4;\n                    case 4:\n                        ++j;\n                        return [3 /*break*/, 2];\n                    case 5:\n                        bestChild = this.heapArray[bestChildIndex];\n                        _a = typeof bestChild !== 'undefined';\n                        if (!_a) return [3 /*break*/, 7];\n                        return [4 /*yield*/, this.compare(self, bestChild)];\n                    case 6:\n                        _a = (_b.sent()) > 0;\n                        _b.label = 7;\n                    case 7:\n                        if (_a) {\n                            this._moveNode(i, bestChildIndex);\n                            i = bestChildIndex;\n                        }\n                        else {\n                            moveIt = false;\n                        }\n                        return [3 /*break*/, 1];\n                    case 8: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Move a node up the tree (to the root) to find a place where the heap is sorted.\n     * @param  {Number} i Index of the node\n     */\n    HeapAsync.prototype._sortNodeUp = function (i) {\n        return __awaiter(this, void 0, void 0, function () {\n            var moveIt, pi, _a;\n            return __generator$1(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        moveIt = i > 0;\n                        _b.label = 1;\n                    case 1:\n                        if (!moveIt) return [3 /*break*/, 4];\n                        pi = HeapAsync.getParentIndexOf(i);\n                        _a = pi >= 0;\n                        if (!_a) return [3 /*break*/, 3];\n                        return [4 /*yield*/, this.compare(this.heapArray[pi], this.heapArray[i])];\n                    case 2:\n                        _a = (_b.sent()) > 0;\n                        _b.label = 3;\n                    case 3:\n                        if (_a) {\n                            this._moveNode(i, pi);\n                            i = pi;\n                        }\n                        else {\n                            moveIt = false;\n                        }\n                        return [3 /*break*/, 1];\n                    case 4: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Return the top (highest value) N elements of the heap, without corner cases, unsorted\n     * Implementation: push.\n     *\n     * @param  {Number} n  Number of elements.\n     * @return {Array}     Array of length <= N.\n     */\n    HeapAsync.prototype._topN_push = function (n) {\n        return __awaiter(this, void 0, void 0, function () {\n            var topHeap, indices, arr, i;\n            return __generator$1(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        topHeap = new HeapAsync(this._invertedCompare);\n                        topHeap.limit = n;\n                        indices = [0];\n                        arr = this.heapArray;\n                        _a.label = 1;\n                    case 1:\n                        if (!indices.length) return [3 /*break*/, 7];\n                        i = indices.shift();\n                        if (!(i < arr.length)) return [3 /*break*/, 6];\n                        if (!(topHeap.length < n)) return [3 /*break*/, 3];\n                        return [4 /*yield*/, topHeap.push(arr[i])];\n                    case 2:\n                        _a.sent();\n                        indices.push.apply(indices, __spreadArray$1([], __read$1(HeapAsync.getChildrenIndexOf(i)), false));\n                        return [3 /*break*/, 6];\n                    case 3: return [4 /*yield*/, this.compare(arr[i], topHeap.peek())];\n                    case 4:\n                        if (!((_a.sent()) < 0)) return [3 /*break*/, 6];\n                        return [4 /*yield*/, topHeap.replace(arr[i])];\n                    case 5:\n                        _a.sent();\n                        indices.push.apply(indices, __spreadArray$1([], __read$1(HeapAsync.getChildrenIndexOf(i)), false));\n                        _a.label = 6;\n                    case 6: return [3 /*break*/, 1];\n                    case 7: return [2 /*return*/, topHeap.toArray()];\n                }\n            });\n        });\n    };\n    /**\n     * Return the top (highest value) N elements of the heap, without corner cases, unsorted\n     * Implementation: init + push.\n     *\n     * @param  {Number} n  Number of elements.\n     * @return {Array}     Array of length <= N.\n     */\n    HeapAsync.prototype._topN_fill = function (n) {\n        return __awaiter(this, void 0, void 0, function () {\n            var heapArray, topHeap, branch, indices, i, i;\n            return __generator$1(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        heapArray = this.heapArray;\n                        topHeap = new HeapAsync(this._invertedCompare);\n                        topHeap.limit = n;\n                        topHeap.heapArray = heapArray.slice(0, n);\n                        return [4 /*yield*/, topHeap.init()];\n                    case 1:\n                        _a.sent();\n                        branch = HeapAsync.getParentIndexOf(n - 1) + 1;\n                        indices = [];\n                        for (i = branch; i < n; ++i) {\n                            indices.push.apply(indices, __spreadArray$1([], __read$1(HeapAsync.getChildrenIndexOf(i).filter(function (l) { return l < heapArray.length; })), false));\n                        }\n                        if ((n - 1) % 2) {\n                            indices.push(n);\n                        }\n                        _a.label = 2;\n                    case 2:\n                        if (!indices.length) return [3 /*break*/, 6];\n                        i = indices.shift();\n                        if (!(i < heapArray.length)) return [3 /*break*/, 5];\n                        return [4 /*yield*/, this.compare(heapArray[i], topHeap.peek())];\n                    case 3:\n                        if (!((_a.sent()) < 0)) return [3 /*break*/, 5];\n                        return [4 /*yield*/, topHeap.replace(heapArray[i])];\n                    case 4:\n                        _a.sent();\n                        indices.push.apply(indices, __spreadArray$1([], __read$1(HeapAsync.getChildrenIndexOf(i)), false));\n                        _a.label = 5;\n                    case 5: return [3 /*break*/, 2];\n                    case 6: return [2 /*return*/, topHeap.toArray()];\n                }\n            });\n        });\n    };\n    /**\n     * Return the top (highest value) N elements of the heap, without corner cases, unsorted\n     * Implementation: heap.\n     *\n     * @param  {Number} n  Number of elements.\n     * @return {Array}     Array of length <= N.\n     */\n    HeapAsync.prototype._topN_heap = function (n) {\n        return __awaiter(this, void 0, void 0, function () {\n            var topHeap, result, i, _a, _b;\n            return __generator$1(this, function (_c) {\n                switch (_c.label) {\n                    case 0:\n                        topHeap = this.clone();\n                        result = [];\n                        i = 0;\n                        _c.label = 1;\n                    case 1:\n                        if (!(i < n)) return [3 /*break*/, 4];\n                        _b = (_a = result).push;\n                        return [4 /*yield*/, topHeap.pop()];\n                    case 2:\n                        _b.apply(_a, [(_c.sent())]);\n                        _c.label = 3;\n                    case 3:\n                        ++i;\n                        return [3 /*break*/, 1];\n                    case 4: return [2 /*return*/, result];\n                }\n            });\n        });\n    };\n    /**\n     * Return index of the top element\n     * @param list\n     */\n    HeapAsync.prototype._topIdxOf = function (list) {\n        return __awaiter(this, void 0, void 0, function () {\n            var idx, top, i, comp;\n            return __generator$1(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!list.length) {\n                            return [2 /*return*/, -1];\n                        }\n                        idx = 0;\n                        top = list[idx];\n                        i = 1;\n                        _a.label = 1;\n                    case 1:\n                        if (!(i < list.length)) return [3 /*break*/, 4];\n                        return [4 /*yield*/, this.compare(list[i], top)];\n                    case 2:\n                        comp = _a.sent();\n                        if (comp < 0) {\n                            idx = i;\n                            top = list[i];\n                        }\n                        _a.label = 3;\n                    case 3:\n                        ++i;\n                        return [3 /*break*/, 1];\n                    case 4: return [2 /*return*/, idx];\n                }\n            });\n        });\n    };\n    /**\n     * Return the top element\n     * @param list\n     */\n    HeapAsync.prototype._topOf = function () {\n        var list = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            list[_i] = arguments[_i];\n        }\n        return __awaiter(this, void 0, void 0, function () {\n            var heap;\n            return __generator$1(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        heap = new HeapAsync(this.compare);\n                        return [4 /*yield*/, heap.init(list)];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/, heap.peek()];\n                }\n            });\n        });\n    };\n    return HeapAsync;\n}());\n\nvar __generator = (undefined && undefined.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (g && (g = 0, op[0] && (_ = 0)), _) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nvar __read = (undefined && undefined.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spreadArray = (undefined && undefined.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\nvar toInt = function (n) { return ~~n; };\n/**\n * Heap\n * @type {Class}\n */\nvar Heap = /** @class */ (function () {\n    /**\n     * Heap instance constructor.\n     * @param  {Function} compare Optional comparison function, defaults to Heap.minComparator<number>\n     */\n    function Heap(compare) {\n        if (compare === void 0) { compare = Heap.minComparator; }\n        var _this = this;\n        this.compare = compare;\n        this.heapArray = [];\n        this._limit = 0;\n        /**\n         * Alias of {@link add}\n         * @see add\n         */\n        this.offer = this.add;\n        /**\n         * Alias of {@link peek}\n         * @see peek\n         */\n        this.element = this.peek;\n        /**\n         * Alias of {@link pop}\n         * @see pop\n         */\n        this.poll = this.pop;\n        /**\n         * Alias of {@link clear}\n         * @see clear\n         */\n        this.removeAll = this.clear;\n        /**\n         * Returns the inverse to the comparison function.\n         * @return {Function}\n         */\n        this._invertedCompare = function (a, b) {\n            return -1 * _this.compare(a, b);\n        };\n    }\n    /*\n              Static methods\n     */\n    /**\n     * Gets children indices for given index.\n     * @param  {Number} idx     Parent index\n     * @return {Array(Number)}  Array of children indices\n     */\n    Heap.getChildrenIndexOf = function (idx) {\n        return [idx * 2 + 1, idx * 2 + 2];\n    };\n    /**\n     * Gets parent index for given index.\n     * @param  {Number} idx  Children index\n     * @return {Number | undefined}      Parent index, -1 if idx is 0\n     */\n    Heap.getParentIndexOf = function (idx) {\n        if (idx <= 0) {\n            return -1;\n        }\n        var whichChildren = idx % 2 ? 1 : 2;\n        return Math.floor((idx - whichChildren) / 2);\n    };\n    /**\n     * Gets sibling index for given index.\n     * @param  {Number} idx  Children index\n     * @return {Number | undefined}      Sibling index, -1 if idx is 0\n     */\n    Heap.getSiblingIndexOf = function (idx) {\n        if (idx <= 0) {\n            return -1;\n        }\n        var whichChildren = idx % 2 ? 1 : -1;\n        return idx + whichChildren;\n    };\n    /**\n     * Min heap comparison function, default.\n     * @param  {any} a     First element\n     * @param  {any} b     Second element\n     * @return {Number}    0 if they're equal, positive if `a` goes up, negative if `b` goes up\n     */\n    Heap.minComparator = function (a, b) {\n        if (a > b) {\n            return 1;\n        }\n        else if (a < b) {\n            return -1;\n        }\n        else {\n            return 0;\n        }\n    };\n    /**\n     * Max heap comparison function.\n     * @param  {any} a     First element\n     * @param  {any} b     Second element\n     * @return {Number}    0 if they're equal, positive if `a` goes up, negative if `b` goes up\n     */\n    Heap.maxComparator = function (a, b) {\n        if (b > a) {\n            return 1;\n        }\n        else if (b < a) {\n            return -1;\n        }\n        else {\n            return 0;\n        }\n    };\n    /**\n     * Min number heap comparison function, default.\n     * @param  {Number} a     First element\n     * @param  {Number} b     Second element\n     * @return {Number}    0 if they're equal, positive if `a` goes up, negative if `b` goes up\n     */\n    Heap.minComparatorNumber = function (a, b) {\n        return a - b;\n    };\n    /**\n     * Max number heap comparison function.\n     * @param  {Number} a     First element\n     * @param  {Number} b     Second element\n     * @return {Number}    0 if they're equal, positive if `a` goes up, negative if `b` goes up\n     */\n    Heap.maxComparatorNumber = function (a, b) {\n        return b - a;\n    };\n    /**\n     * Default equality function.\n     * @param  {any} a    First element\n     * @param  {any} b    Second element\n     * @return {Boolean}  True if equal, false otherwise\n     */\n    Heap.defaultIsEqual = function (a, b) {\n        return a === b;\n    };\n    /**\n     * Prints a heap.\n     * @param  {Heap} heap Heap to be printed\n     * @returns {String}\n     */\n    Heap.print = function (heap) {\n        function deep(i) {\n            var pi = Heap.getParentIndexOf(i);\n            return Math.floor(Math.log2(pi + 1));\n        }\n        function repeat(str, times) {\n            var out = '';\n            for (; times > 0; --times) {\n                out += str;\n            }\n            return out;\n        }\n        var node = 0;\n        var lines = [];\n        var maxLines = deep(heap.length - 1) + 2;\n        var maxLength = 0;\n        while (node < heap.length) {\n            var i = deep(node) + 1;\n            if (node === 0) {\n                i = 0;\n            }\n            // Text representation\n            var nodeText = String(heap.get(node));\n            if (nodeText.length > maxLength) {\n                maxLength = nodeText.length;\n            }\n            // Add to line\n            lines[i] = lines[i] || [];\n            lines[i].push(nodeText);\n            node += 1;\n        }\n        return lines\n            .map(function (line, i) {\n            var times = Math.pow(2, maxLines - i) - 1;\n            return (repeat(' ', Math.floor(times / 2) * maxLength) +\n                line\n                    .map(function (el) {\n                    // centered\n                    var half = (maxLength - el.length) / 2;\n                    return repeat(' ', Math.ceil(half)) + el + repeat(' ', Math.floor(half));\n                })\n                    .join(repeat(' ', times * maxLength)));\n        })\n            .join('\\n');\n    };\n    /*\n              Python style\n     */\n    /**\n     * Converts an array into an array-heap, in place\n     * @param  {Array}    arr      Array to be modified\n     * @param  {Function} compare  Optional compare function\n     * @return {Heap}              For convenience, it returns a Heap instance\n     */\n    Heap.heapify = function (arr, compare) {\n        var heap = new Heap(compare);\n        heap.heapArray = arr;\n        heap.init();\n        return heap;\n    };\n    /**\n     * Extract the peek of an array-heap\n     * @param  {Array}    heapArr  Array to be modified, should be a heap\n     * @param  {Function} compare  Optional compare function\n     * @return {any}               Returns the extracted peek\n     */\n    Heap.heappop = function (heapArr, compare) {\n        var heap = new Heap(compare);\n        heap.heapArray = heapArr;\n        return heap.pop();\n    };\n    /**\n     * Pushes a item into an array-heap\n     * @param  {Array}    heapArr  Array to be modified, should be a heap\n     * @param  {any}      item     Item to push\n     * @param  {Function} compare  Optional compare function\n     */\n    Heap.heappush = function (heapArr, item, compare) {\n        var heap = new Heap(compare);\n        heap.heapArray = heapArr;\n        heap.push(item);\n    };\n    /**\n     * Push followed by pop, faster\n     * @param  {Array}    heapArr  Array to be modified, should be a heap\n     * @param  {any}      item     Item to push\n     * @param  {Function} compare  Optional compare function\n     * @return {any}               Returns the extracted peek\n     */\n    Heap.heappushpop = function (heapArr, item, compare) {\n        var heap = new Heap(compare);\n        heap.heapArray = heapArr;\n        return heap.pushpop(item);\n    };\n    /**\n     * Replace peek with item\n     * @param  {Array}    heapArr  Array to be modified, should be a heap\n     * @param  {any}      item     Item as replacement\n     * @param  {Function} compare  Optional compare function\n     * @return {any}               Returns the extracted peek\n     */\n    Heap.heapreplace = function (heapArr, item, compare) {\n        var heap = new Heap(compare);\n        heap.heapArray = heapArr;\n        return heap.replace(item);\n    };\n    /**\n     * Return the `n` most valuable elements of a heap-like Array\n     * @param  {Array}    heapArr  Array, should be an array-heap\n     * @param  {number}   n        Max number of elements\n     * @param  {Function} compare  Optional compare function\n     * @return {any}               Elements\n     */\n    Heap.heaptop = function (heapArr, n, compare) {\n        if (n === void 0) { n = 1; }\n        var heap = new Heap(compare);\n        heap.heapArray = heapArr;\n        return heap.top(n);\n    };\n    /**\n     * Return the `n` least valuable elements of a heap-like Array\n     * @param  {Array}    heapArr  Array, should be an array-heap\n     * @param  {number}   n        Max number of elements\n     * @param  {Function} compare  Optional compare function\n     * @return {any}               Elements\n     */\n    Heap.heapbottom = function (heapArr, n, compare) {\n        if (n === void 0) { n = 1; }\n        var heap = new Heap(compare);\n        heap.heapArray = heapArr;\n        return heap.bottom(n);\n    };\n    /**\n     * Return the `n` most valuable elements of an iterable\n     * @param  {number}   n        Max number of elements\n     * @param  {Iterable} Iterable Iterable list of elements\n     * @param  {Function} compare  Optional compare function\n     * @return {any}               Elements\n     */\n    Heap.nlargest = function (n, iterable, compare) {\n        var heap = new Heap(compare);\n        heap.heapArray = __spreadArray([], __read(iterable), false);\n        heap.init();\n        return heap.top(n);\n    };\n    /**\n     * Return the `n` least valuable elements of an iterable\n     * @param  {number}   n        Max number of elements\n     * @param  {Iterable} Iterable Iterable list of elements\n     * @param  {Function} compare  Optional compare function\n     * @return {any}               Elements\n     */\n    Heap.nsmallest = function (n, iterable, compare) {\n        var heap = new Heap(compare);\n        heap.heapArray = __spreadArray([], __read(iterable), false);\n        heap.init();\n        return heap.bottom(n);\n    };\n    /*\n              Instance methods\n     */\n    /**\n     * Adds an element to the heap. Aliases: {@link offer}.\n     * Same as: {@link push}(element).\n     * @param {any} element Element to be added\n     * @return {Boolean} true\n     */\n    Heap.prototype.add = function (element) {\n        this._sortNodeUp(this.heapArray.push(element) - 1);\n        this._applyLimit();\n        return true;\n    };\n    /**\n     * Adds an array of elements to the heap.\n     * Similar as: {@link push}(element, element, ...).\n     * @param {Array} elements Elements to be added\n     * @return {Boolean} true\n     */\n    Heap.prototype.addAll = function (elements) {\n        var _a;\n        var i = this.length;\n        (_a = this.heapArray).push.apply(_a, __spreadArray([], __read(elements), false));\n        for (var l = this.length; i < l; ++i) {\n            this._sortNodeUp(i);\n        }\n        this._applyLimit();\n        return true;\n    };\n    /**\n     * Return the bottom (lowest value) N elements of the heap.\n     *\n     * @param  {Number} n  Number of elements.\n     * @return {Array}     Array of length <= N.\n     */\n    Heap.prototype.bottom = function (n) {\n        if (n === void 0) { n = 1; }\n        if (this.heapArray.length === 0 || n <= 0) {\n            // Nothing to do\n            return [];\n        }\n        else if (this.heapArray.length === 1) {\n            // Just the peek\n            return [this.heapArray[0]];\n        }\n        else if (n >= this.heapArray.length) {\n            // The whole heap\n            return __spreadArray([], __read(this.heapArray), false);\n        }\n        else {\n            // Some elements\n            return this._bottomN_push(~~n);\n        }\n    };\n    /**\n     * Check if the heap is sorted, useful for testing purposes.\n     * @return {Undefined | Element}  Returns an element if something wrong is found, otherwise it's undefined\n     */\n    Heap.prototype.check = function () {\n        var _this = this;\n        return this.heapArray.find(function (el, j) { return !!_this.getChildrenOf(j).find(function (ch) { return _this.compare(el, ch) > 0; }); });\n    };\n    /**\n     * Remove all of the elements from this heap.\n     */\n    Heap.prototype.clear = function () {\n        this.heapArray = [];\n    };\n    /**\n     * Clone this heap\n     * @return {Heap}\n     */\n    Heap.prototype.clone = function () {\n        var cloned = new Heap(this.comparator());\n        cloned.heapArray = this.toArray();\n        cloned._limit = this._limit;\n        return cloned;\n    };\n    /**\n     * Returns the comparison function.\n     * @return {Function}\n     */\n    Heap.prototype.comparator = function () {\n        return this.compare;\n    };\n    /**\n     * Returns true if this queue contains the specified element.\n     * @param  {any}      o   Element to be found\n     * @param  {Function} callbackFn  Optional comparison function, receives (element, needle)\n     * @return {Boolean}\n     */\n    Heap.prototype.contains = function (o, callbackFn) {\n        if (callbackFn === void 0) { callbackFn = Heap.defaultIsEqual; }\n        return this.indexOf(o, callbackFn) !== -1;\n    };\n    /**\n     * Initialize a heap, sorting nodes\n     * @param  {Array} array Optional initial state array\n     */\n    Heap.prototype.init = function (array) {\n        if (array) {\n            this.heapArray = __spreadArray([], __read(array), false);\n        }\n        for (var i = Math.floor(this.heapArray.length); i >= 0; --i) {\n            this._sortNodeDown(i);\n        }\n        this._applyLimit();\n    };\n    /**\n     * Test if the heap has no elements.\n     * @return {Boolean} True if no elements on the heap\n     */\n    Heap.prototype.isEmpty = function () {\n        return this.length === 0;\n    };\n    /**\n     * Get the index of the first occurrence of the element in the heap (using the comparator).\n     * @param  {any}      element    Element to be found\n     * @param  {Function} callbackFn Optional comparison function, receives (element, needle)\n     * @return {Number}              Index or -1 if not found\n     */\n    Heap.prototype.indexOf = function (element, callbackFn) {\n        if (callbackFn === void 0) { callbackFn = Heap.defaultIsEqual; }\n        if (this.heapArray.length === 0) {\n            return -1;\n        }\n        var indexes = [];\n        var currentIndex = 0;\n        while (currentIndex < this.heapArray.length) {\n            var currentElement = this.heapArray[currentIndex];\n            if (callbackFn(currentElement, element)) {\n                return currentIndex;\n            }\n            else if (this.compare(currentElement, element) <= 0) {\n                indexes.push.apply(indexes, __spreadArray([], __read(Heap.getChildrenIndexOf(currentIndex)), false));\n            }\n            currentIndex = indexes.shift() || this.heapArray.length;\n        }\n        return -1;\n    };\n    /**\n     * Get the indexes of the every occurrence of the element in the heap (using the comparator).\n     * @param  {any}      element    Element to be found\n     * @param  {Function} callbackFn Optional comparison function, receives (element, needle)\n     * @return {Array}               Array of indexes or empty array if not found\n     */\n    Heap.prototype.indexOfEvery = function (element, callbackFn) {\n        if (callbackFn === void 0) { callbackFn = Heap.defaultIsEqual; }\n        if (this.heapArray.length === 0) {\n            return [];\n        }\n        var indexes = [];\n        var foundIndexes = [];\n        var currentIndex = 0;\n        while (currentIndex < this.heapArray.length) {\n            var currentElement = this.heapArray[currentIndex];\n            if (callbackFn(currentElement, element)) {\n                foundIndexes.push(currentIndex);\n                indexes.push.apply(indexes, __spreadArray([], __read(Heap.getChildrenIndexOf(currentIndex)), false));\n            }\n            else if (this.compare(currentElement, element) <= 0) {\n                indexes.push.apply(indexes, __spreadArray([], __read(Heap.getChildrenIndexOf(currentIndex)), false));\n            }\n            currentIndex = indexes.shift() || this.heapArray.length;\n        }\n        return foundIndexes;\n    };\n    /**\n     * Get the leafs of the tree (no children nodes).\n     * See also: {@link getChildrenOf} and {@link bottom}.\n     * @return {Array}\n     * @see getChildrenOf\n     * @see bottom\n     */\n    Heap.prototype.leafs = function () {\n        if (this.heapArray.length === 0) {\n            return [];\n        }\n        var pi = Heap.getParentIndexOf(this.heapArray.length - 1);\n        return this.heapArray.slice(pi + 1);\n    };\n    Object.defineProperty(Heap.prototype, \"length\", {\n        /**\n         * Length of the heap. Aliases: {@link size}.\n         * @return {Number}\n         * @see size\n         */\n        get: function () {\n            return this.heapArray.length;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Heap.prototype, \"limit\", {\n        /**\n         * Get length limit of the heap.\n         * Use {@link setLimit} or {@link limit} to set the limit.\n         * @return {Number}\n         * @see setLimit\n         */\n        get: function () {\n            return this._limit;\n        },\n        /**\n         * Set length limit of the heap. Same as using {@link setLimit}.\n         * @description If the heap is longer than the limit, the needed amount of leafs are removed.\n         * @param {Number} _l Limit, defaults to 0 (no limit). Negative, Infinity, or NaN values set the limit to 0.\n         * @see setLimit\n         */\n        set: function (_l) {\n            if (_l < 0 || isNaN(_l)) {\n                // NaN, negative, and Infinity are treated as 0\n                this._limit = 0;\n            }\n            else {\n                // truncating a floating-point number to an integer\n                this._limit = ~~_l;\n            }\n            this._applyLimit();\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Set length limit of the heap.\n     * Same as assigning to {@link limit} but returns NaN if the value was invalid.\n     * @param {Number} _l Limit. Negative, Infinity, or NaN values set the limit to 0.\n     * @return {Number} The limit or NaN if the value was negative, or NaN.\n     * @see limit\n     */\n    Heap.prototype.setLimit = function (_l) {\n        this.limit = _l;\n        if (_l < 0 || isNaN(_l)) {\n            return NaN;\n        }\n        else {\n            return this._limit;\n        }\n    };\n    /**\n     * Top node. Aliases: {@link element}.\n     * Same as: {@link top}(1)[0].\n     * @return {any} Top node\n     * @see top\n     */\n    Heap.prototype.peek = function () {\n        return this.heapArray[0];\n    };\n    /**\n     * Extract the top node (root). Aliases: {@link poll}.\n     * @return {any} Extracted top node, undefined if empty\n     */\n    Heap.prototype.pop = function () {\n        var last = this.heapArray.pop();\n        if (this.length > 0 && last !== undefined) {\n            return this.replace(last);\n        }\n        return last;\n    };\n    /**\n     * Pushes element(s) to the heap.\n     * See also: {@link add} and {@link addAll}.\n     * @param  {...any} elements Elements to insert\n     * @return {Boolean} True if elements are present\n     */\n    Heap.prototype.push = function () {\n        var elements = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            elements[_i] = arguments[_i];\n        }\n        if (elements.length < 1) {\n            return false;\n        }\n        else if (elements.length === 1) {\n            return this.add(elements[0]);\n        }\n        else {\n            return this.addAll(elements);\n        }\n    };\n    /**\n     * Same as push & pop in sequence, but faster\n     * @param  {any} element Element to insert\n     * @return {any}  Extracted top node\n     */\n    Heap.prototype.pushpop = function (element) {\n        var _a;\n        if (this.compare(this.heapArray[0], element) < 0) {\n            _a = __read([this.heapArray[0], element], 2), element = _a[0], this.heapArray[0] = _a[1];\n            this._sortNodeDown(0);\n        }\n        return element;\n    };\n    /**\n     * Remove the first occurrence of an element from the heap.\n     * @param  {any}   o      Element to be found\n     * @param  {Function} callbackFn  Optional equality function, receives (element, needle)\n     * @return {Boolean}      True if the heap was modified\n     */\n    Heap.prototype.remove = function (o, callbackFn) {\n        if (callbackFn === void 0) { callbackFn = Heap.defaultIsEqual; }\n        if (this.length > 0) {\n            if (o === undefined) {\n                this.pop();\n                return true;\n            }\n            else {\n                var idx = this.indexOf(o, callbackFn);\n                if (idx >= 0) {\n                    if (idx === 0) {\n                        this.pop();\n                    }\n                    else if (idx === this.length - 1) {\n                        this.heapArray.pop();\n                    }\n                    else {\n                        this.heapArray.splice(idx, 1, this.heapArray.pop());\n                        this._sortNodeUp(idx);\n                        this._sortNodeDown(idx);\n                    }\n                    return true;\n                }\n            }\n        }\n        return false;\n    };\n    /**\n     * Pop the current peek value, and add the new item.\n     * @param  {any} element  Element to replace peek\n     * @return {any}         Old peek\n     */\n    Heap.prototype.replace = function (element) {\n        var peek = this.heapArray[0];\n        this.heapArray[0] = element;\n        this._sortNodeDown(0);\n        return peek;\n    };\n    /**\n     * Size of the heap\n     * @return {Number}\n     */\n    Heap.prototype.size = function () {\n        return this.length;\n    };\n    /**\n     * Return the top (highest value) N elements of the heap.\n     *\n     * @param  {Number} n  Number of elements.\n     * @return {Array}    Array of length <= N.\n     */\n    Heap.prototype.top = function (n) {\n        if (n === void 0) { n = 1; }\n        if (this.heapArray.length === 0 || n <= 0) {\n            // Nothing to do\n            return [];\n        }\n        else if (this.heapArray.length === 1 || n === 1) {\n            // Just the peek\n            return [this.heapArray[0]];\n        }\n        else if (n >= this.heapArray.length) {\n            // The whole peek\n            return __spreadArray([], __read(this.heapArray), false);\n        }\n        else {\n            // Some elements\n            return this._topN_push(~~n);\n        }\n    };\n    /**\n     * Clone the heap's internal array\n     * @return {Array}\n     */\n    Heap.prototype.toArray = function () {\n        return __spreadArray([], __read(this.heapArray), false);\n    };\n    /**\n     * String output, call to Array.prototype.toString()\n     * @return {String}\n     */\n    Heap.prototype.toString = function () {\n        return this.heapArray.toString();\n    };\n    /**\n     * Get the element at the given index.\n     * @param  {Number} i Index to get\n     * @return {any}       Element at that index\n     */\n    Heap.prototype.get = function (i) {\n        return this.heapArray[i];\n    };\n    /**\n     * Get the elements of these node's children\n     * @param  {Number} idx Node index\n     * @return {Array(any)}  Children elements\n     */\n    Heap.prototype.getChildrenOf = function (idx) {\n        var _this = this;\n        return Heap.getChildrenIndexOf(idx)\n            .map(function (i) { return _this.heapArray[i]; })\n            .filter(function (e) { return e !== undefined; });\n    };\n    /**\n     * Get the element of this node's parent\n     * @param  {Number} idx Node index\n     * @return {any}     Parent element\n     */\n    Heap.prototype.getParentOf = function (idx) {\n        var pi = Heap.getParentIndexOf(idx);\n        return this.heapArray[pi];\n    };\n    /**\n     * Iterator interface\n     */\n    Heap.prototype[Symbol.iterator] = function () {\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0:\n                    if (!this.length) return [3 /*break*/, 2];\n                    return [4 /*yield*/, this.pop()];\n                case 1:\n                    _a.sent();\n                    return [3 /*break*/, 0];\n                case 2: return [2 /*return*/];\n            }\n        });\n    };\n    /**\n     * Returns an iterator. To comply with Java interface.\n     */\n    Heap.prototype.iterator = function () {\n        return this.toArray();\n    };\n    /**\n     * Limit heap size if needed\n     */\n    Heap.prototype._applyLimit = function () {\n        if (this._limit > 0 && this._limit < this.heapArray.length) {\n            var rm = this.heapArray.length - this._limit;\n            // It's much faster than splice\n            while (rm) {\n                this.heapArray.pop();\n                --rm;\n            }\n        }\n    };\n    /**\n     * Return the bottom (lowest value) N elements of the heap, without corner cases, unsorted\n     *\n     * @param  {Number} n  Number of elements.\n     * @return {Array}     Array of length <= N.\n     */\n    Heap.prototype._bottomN_push = function (n) {\n        // Use an inverted heap\n        var bottomHeap = new Heap(this.compare);\n        bottomHeap.limit = n;\n        bottomHeap.heapArray = this.heapArray.slice(-n);\n        bottomHeap.init();\n        var startAt = this.heapArray.length - 1 - n;\n        var parentStartAt = Heap.getParentIndexOf(startAt);\n        var indices = [];\n        for (var i = startAt; i > parentStartAt; --i) {\n            indices.push(i);\n        }\n        var arr = this.heapArray;\n        while (indices.length) {\n            var i = indices.shift();\n            if (this.compare(arr[i], bottomHeap.peek()) > 0) {\n                bottomHeap.replace(arr[i]);\n                if (i % 2) {\n                    indices.push(Heap.getParentIndexOf(i));\n                }\n            }\n        }\n        return bottomHeap.toArray();\n    };\n    /**\n     * Move a node to a new index, switching places\n     * @param  {Number} j First node index\n     * @param  {Number} k Another node index\n     */\n    Heap.prototype._moveNode = function (j, k) {\n        var _a;\n        _a = __read([this.heapArray[k], this.heapArray[j]], 2), this.heapArray[j] = _a[0], this.heapArray[k] = _a[1];\n    };\n    /**\n     * Move a node down the tree (to the leaves) to find a place where the heap is sorted.\n     * @param  {Number} i Index of the node\n     */\n    Heap.prototype._sortNodeDown = function (i) {\n        var _this = this;\n        var moveIt = i < this.heapArray.length - 1;\n        var self = this.heapArray[i];\n        var getPotentialParent = function (best, j) {\n            if (_this.heapArray.length > j && _this.compare(_this.heapArray[j], _this.heapArray[best]) < 0) {\n                best = j;\n            }\n            return best;\n        };\n        while (moveIt) {\n            var childrenIdx = Heap.getChildrenIndexOf(i);\n            var bestChildIndex = childrenIdx.reduce(getPotentialParent, childrenIdx[0]);\n            var bestChild = this.heapArray[bestChildIndex];\n            if (typeof bestChild !== 'undefined' && this.compare(self, bestChild) > 0) {\n                this._moveNode(i, bestChildIndex);\n                i = bestChildIndex;\n            }\n            else {\n                moveIt = false;\n            }\n        }\n    };\n    /**\n     * Move a node up the tree (to the root) to find a place where the heap is sorted.\n     * @param  {Number} i Index of the node\n     */\n    Heap.prototype._sortNodeUp = function (i) {\n        var moveIt = i > 0;\n        while (moveIt) {\n            var pi = Heap.getParentIndexOf(i);\n            if (pi >= 0 && this.compare(this.heapArray[pi], this.heapArray[i]) > 0) {\n                this._moveNode(i, pi);\n                i = pi;\n            }\n            else {\n                moveIt = false;\n            }\n        }\n    };\n    /**\n     * Return the top (highest value) N elements of the heap, without corner cases, unsorted\n     * Implementation: push.\n     *\n     * @param  {Number} n  Number of elements.\n     * @return {Array}     Array of length <= N.\n     */\n    Heap.prototype._topN_push = function (n) {\n        // Use an inverted heap\n        var topHeap = new Heap(this._invertedCompare);\n        topHeap.limit = n;\n        var indices = [0];\n        var arr = this.heapArray;\n        while (indices.length) {\n            var i = indices.shift();\n            if (i < arr.length) {\n                if (topHeap.length < n) {\n                    topHeap.push(arr[i]);\n                    indices.push.apply(indices, __spreadArray([], __read(Heap.getChildrenIndexOf(i)), false));\n                }\n                else if (this.compare(arr[i], topHeap.peek()) < 0) {\n                    topHeap.replace(arr[i]);\n                    indices.push.apply(indices, __spreadArray([], __read(Heap.getChildrenIndexOf(i)), false));\n                }\n            }\n        }\n        return topHeap.toArray();\n    };\n    /**\n     * Return the top (highest value) N elements of the heap, without corner cases, unsorted\n     * Implementation: init + push.\n     *\n     * @param  {Number} n  Number of elements.\n     * @return {Array}     Array of length <= N.\n     */\n    Heap.prototype._topN_fill = function (n) {\n        // Use an inverted heap\n        var heapArray = this.heapArray;\n        var topHeap = new Heap(this._invertedCompare);\n        topHeap.limit = n;\n        topHeap.heapArray = heapArray.slice(0, n);\n        topHeap.init();\n        var branch = Heap.getParentIndexOf(n - 1) + 1;\n        var indices = [];\n        for (var i = branch; i < n; ++i) {\n            indices.push.apply(indices, __spreadArray([], __read(Heap.getChildrenIndexOf(i).filter(function (l) { return l < heapArray.length; })), false));\n        }\n        if ((n - 1) % 2) {\n            indices.push(n);\n        }\n        while (indices.length) {\n            var i = indices.shift();\n            if (i < heapArray.length) {\n                if (this.compare(heapArray[i], topHeap.peek()) < 0) {\n                    topHeap.replace(heapArray[i]);\n                    indices.push.apply(indices, __spreadArray([], __read(Heap.getChildrenIndexOf(i)), false));\n                }\n            }\n        }\n        return topHeap.toArray();\n    };\n    /**\n     * Return the top (highest value) N elements of the heap, without corner cases, unsorted\n     * Implementation: heap.\n     *\n     * @param  {Number} n  Number of elements.\n     * @return {Array}     Array of length <= N.\n     */\n    Heap.prototype._topN_heap = function (n) {\n        var topHeap = this.clone();\n        var result = [];\n        for (var i = 0; i < n; ++i) {\n            result.push(topHeap.pop());\n        }\n        return result;\n    };\n    /**\n     * Return index of the top element\n     * @param list\n     */\n    Heap.prototype._topIdxOf = function (list) {\n        if (!list.length) {\n            return -1;\n        }\n        var idx = 0;\n        var top = list[idx];\n        for (var i = 1; i < list.length; ++i) {\n            var comp = this.compare(list[i], top);\n            if (comp < 0) {\n                idx = i;\n                top = list[i];\n            }\n        }\n        return idx;\n    };\n    /**\n     * Return the top element\n     * @param list\n     */\n    Heap.prototype._topOf = function () {\n        var list = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            list[_i] = arguments[_i];\n        }\n        var heap = new Heap(this.compare);\n        heap.init(list);\n        return heap.peek();\n    };\n    return Heap;\n}());\n\nexport { Heap, HeapAsync, Heap as default, toInt };\n"],
  "mappings": "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",
  "names": ["HeapAsync", "i", "j", "_a", "_b", "Heap"]
}
